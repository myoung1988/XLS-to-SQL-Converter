Imports Microsoft.Office.Interop

Public Class SQL_Generation

    Structure Fields
        Public iCol As Integer
        Public sSQLField As String
        Public sXLSField As String

    End Structure

    Public Shared oField(100) As Fields
    Public Shared iMax As Integer

    Public Shared Function Insert_SQL_Stmt_Generation()
        Return "Not Implemented"
    End Function

    Public Shared Function Delete_SQL_Stmt_Generation(ByVal sTable As String, ByVal sSQLField As String, ByVal sXLSField As String)
        Return "DELETE FROM " & sTable & " WHERE " & sSQLField & " = " & Format_String(sXLSField)
    End Function

    Public Shared Sub Generate_Statement(ByVal sType As String, ByRef lvwItems As ListView, ByVal sFilePath As String,
                                         ByVal sTable As String, ByVal sSQLKey As String, ByVal sXLSKey As String, ByVal fTest As Boolean)

        Pre_SQL_Statement_Write()

        Select Case sType
            Case "I"
                read_values_XLS_Insert(sFilePath, sTable, lvwItems)
            Case "U"
                read_values_XLS_Update(sFilePath, sTable, lvwItems)
            Case "D"
                read_values_XLS_Delete(sFilePath, sTable, sSQLKey)
        End Select

        Post_SQL_Statement_Write(fTest)

    End Sub

    Private Shared Sub read_values_XLS_Delete(ByVal sFilePath As String, ByVal sTable As String, ByVal sSQLKey As String)
        Try
            Dim xlApp As New Excel.Application
            Dim xlWorkBook As Excel.Workbook
            Dim xlWorkSheet As Excel.Worksheet
            Dim range As Excel.Range
            Dim rCnt As Integer
            Dim Obj As Object

            xlWorkBook = xlApp.Workbooks.Open(sFilePath)
            xlWorkSheet = xlWorkBook.Worksheets("Sheet1")

            range = xlWorkSheet.UsedRange

            ' This reads each row of data
            For rCnt = 2 To range.Rows.Count
                Obj = CType(range.Cells(rCnt, 1), Excel.Range)

                Write_SQL("    " & Delete_SQL_Stmt_Generation(sTable, sSQLKey, Obj.value))
            Next

            xlWorkBook.Close()
            xlApp.Quit()

        Catch ex As Exception
            MessageBox.Show("Could not read " & sFilePath & ". " & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Shared Sub Write_SQL(ByVal sStatement As String)
        SQL_Statement.txtSQL.Text = SQL_Statement.txtSQL.Text & sStatement & vbNewLine
    End Sub

    Private Shared Sub SQL_Backup()
        Dim sTimestamp As String = Now.Date.ToShortDateString & Now.ToShortTimeString

        sTimestamp = sTimestamp.Replace(":", "")
        sTimestamp = sTimestamp.Replace("-", "")
        sTimestamp = sTimestamp.Replace("/", "")
        sTimestamp = sTimestamp.Replace(" ", "")

        Write_SQL("BACKUP DATABASE [" & SQLConfig.SQLConn.Database & "] TO DISK = '" & File_Check.get_DB_Location & "\" & SQLConfig.SQLConn.Database & sTimestamp & ".bak' WITH NOFORMAT, NAME = '" & SQLConfig.SQLConn.Database & "_" & sTimestamp & "'")
    End Sub

    Private Shared Sub Pre_SQL_Statement_Write()
        Write_SQL(vbNewLine & "-- This was generated by the Excel to SQL Conversion Software." & vbNewLine)
        Write_SQL("USE " & SQLConfig.SQLConn.Database)

        If File_Check.get_DB_Backup Then
            SQL_Backup()
        End If

        Write_SQL("BEGIN TRY")
        Write_SQL("  BEGIN TRANSACTION" & vbNewLine)
    End Sub

    Private Shared Sub Post_SQL_Statement_Write(ByVal fTest As Boolean)

        If fTest Then
            Write_SQL(vbNewLine & "    ROLLBACK" & vbNewLine)
        Else
            Write_SQL(vbNewLine & "    COMMIT" & vbNewLine)
        End If

        Write_SQL("    SELECT 'The SQL Query Processed Successfully.' AS 'Results'" & vbNewLine)
        Write_SQL("END TRY")
        Write_SQL("BEGIN CATCH" & vbNewLine)
        Write_SQL("  IF @@TRANCOUNT > 0")
        Write_SQL("     ROLLBACK" & vbNewLine)
        Write_SQL("  DECLARE @ErrMsg nvarchar(4000), @ErrSeverity int")
        Write_SQL("  SELECT @ErrMsg = ERROR_MESSAGE(), @ErrSeverity = ERROR_SEVERITY()" & vbNewLine)
        Write_SQL("  RAISERROR(@ErrMsg, @ErrSeverity, 1)" & vbNewLine)
        Write_SQL("END CATCH")
    End Sub

    Private Shared Sub read_values_XLS_Update(ByVal sFilePath As String, ByVal sTable As String, ByVal lvwItems As ListView)
        Try

            Load_Field_Matchings(sFilePath)

            Dim xlApp As New Excel.Application
            Dim xlWorkBook As Excel.Workbook
            Dim xlWorkSheet As Excel.Worksheet
            Dim range As Excel.Range
            Dim rCnt As Integer
            Dim Obj As Object

            xlWorkBook = xlApp.Workbooks.Open(sFilePath)
            xlWorkSheet = xlWorkBook.Worksheets("Sheet1")

            range = xlWorkSheet.UsedRange

            ' This reads each row of data

            Dim sSQL As String = ""
            For rCnt = 2 To range.Rows.Count
                Dim sCurrentSQL As String = ""
                Dim fEmpty As Boolean = True
                Dim sKey As String = ""

                sCurrentSQL = sCurrentSQL & "    UPDATE " & sTable & " SET "

                For cCnt = 1 To range.Columns.Count
                    For Each itm As ListViewItem In XLSSQL_Main.lvwFields.Items

                        Obj = CType(range.Cells(1, cCnt), Excel.Range)
                        If Obj.value.ToString = itm.SubItems(1).Text Then

                            If fEmpty Then
                                fEmpty = False
                            Else
                                sCurrentSQL = sCurrentSQL & ", "
                            End If

                            Obj = CType(range.Cells(rCnt, cCnt), Excel.Range)
                            sCurrentSQL = sCurrentSQL & itm.SubItems(2).Text & " = " & Format_String(Obj.value.ToString)

                        ElseIf Obj.value.ToString = XLSSQL_Main.cboKeyXLS.Text Then
                            Obj = CType(range.Cells(rCnt, cCnt), Excel.Range)
                            sKey = Obj.value.ToString
                        End If
                    Next

                Next

                sCurrentSQL = sCurrentSQL & " WHERE " & XLSSQL_Main.cboKeySQL.Text & " = " & Format_String(sKey)

                If rCnt = range.Rows.Count Then
                    sSQL = sSQL & sCurrentSQL
                Else
                    sSQL = sSQL & sCurrentSQL & vbNewLine
                End If

            Next

            xlWorkBook.Close()
            xlApp.Quit()

            Write_SQL(sSQL)

        Catch ex As Exception
            MessageBox.Show("Could not read " & sFilePath & "." & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Shared Function get_SQL_Update(ByVal sFilePath As String, ByVal lvw As ListView, ByVal XLScol As Integer)
        Try
            Dim xlApp As New Excel.Application
            Dim xlWorkBook As Excel.Workbook
            Dim xlWorkSheet As Excel.Worksheet
            Dim range As Excel.Range

            xlWorkBook = xlApp.Workbooks.Open(sFilePath)
            xlWorkSheet = xlWorkBook.Worksheets("Sheet1")

            range = xlWorkSheet.UsedRange
            Dim iRange As Integer = range.Columns.Count

            xlWorkBook.Close()
            xlApp.Quit()

            Dim sSQL As String = ""
            For Each itm As ListViewItem In lvw.Items
                For iCnt = 1 To iRange
                    If get_XLS_Col_Name(sFilePath, XLScol) = get_XLS_Col_Name(sFilePath, iCnt) Then
                        sSQL = itm.SubItems(2).Text
                    End If
                Next
            Next

            Return sSQL

        Catch ex As Exception
            Return "ERROR get_SQL_Update"
        End Try
    End Function

    Private Shared Function get_XLS_Col_Name(ByVal sFilePath As String, ByVal iColNum As Integer) As String
        Try
            Dim xlApp As New Excel.Application
            Dim xlWorkBook As Excel.Workbook
            Dim xlWorkSheet As Excel.Worksheet
            Dim range As Excel.Range
            Dim Obj As Object

            xlWorkBook = xlApp.Workbooks.Open(sFilePath)
            xlWorkSheet = xlWorkBook.Worksheets("Sheet1")

            range = xlWorkSheet.UsedRange

            Obj = CType(range.Cells(1, iColNum), Excel.Range)
            Dim sValue As String = Obj.value.ToString

            xlWorkBook.Close()
            xlApp.Quit()

            Return sValue

        Catch ex As Exception
            Return "ERROR get_XLS_Col_Name"
        End Try
    End Function

    Private Shared Sub Load_Field_Matchings(ByVal sFilePath As String)
        Dim xlApp As New Excel.Application
        Dim xlWorkBook As Excel.Workbook
        Dim xlWorkSheet As Excel.Worksheet
        Dim range As Excel.Range

        xlWorkBook = xlApp.Workbooks.Open(sFilePath)
        xlWorkSheet = xlWorkBook.Worksheets("Sheet1")

        range = xlWorkSheet.UsedRange
        Dim iRange As Integer = range.Columns.Count

        xlWorkBook.Close()
        xlApp.Quit()

        Dim iCount As Integer = 1
        For iCnt = 1 To iRange
            oField(iCount).iCol = iCnt
            oField(iCount).sXLSField = get_XLS_Col_Name(sFilePath, iCnt)
            oField(iCount).sSQLField = get_SQL_Update(sFilePath, XLSSQL_Main.lvwFields, iCnt)
            iMax = iCount

            iCount = iCount + 1
        Next

    End Sub

    Private Shared Function get_Field(ByVal iCol As Integer) As Fields
        Return oField(iCol)
    End Function

    Private Shared Function get_ColNum(ByVal sSQL As String) As Integer
        For iCount = 1 To iMax
            If oField(iCount).sSQLField = sSQL Then
                Return oField(iCount).iCol
            End If
        Next

        Return 0

    End Function

    Public Shared Sub read_values_XLS_Insert(ByVal sFilePath As String, ByVal sTable As String, ByVal lvwItems As ListView)
        Try

            Load_Field_Matchings(sFilePath)

            Dim xlApp As New Excel.Application
            Dim xlWorkBook As Excel.Workbook
            Dim xlWorkSheet As Excel.Worksheet
            Dim range As Excel.Range
            Dim rCnt As Integer
            Dim Obj As Object

            xlWorkBook = xlApp.Workbooks.Open(sFilePath)
            xlWorkSheet = xlWorkBook.Worksheets("Sheet1")

            range = xlWorkSheet.UsedRange

            ' This reads each row of data

            Dim sSQL As String = ""
            For rCnt = 2 To range.Rows.Count
                Dim sCurrentSQL As String = ""
                Dim fEmpty As Boolean = True
                Dim sKey As String = ""

                sCurrentSQL = sCurrentSQL & "    INSERT INTO " & sTable & " (" & XLSSQL_Main.cboKeySQL.Text & ", " & get_SQL_Cols() & ") VALUES ("

                Dim fKey As Boolean = False
                For cCnt = 1 To range.Columns.Count
                    For Each itm As ListViewItem In XLSSQL_Main.lvwFields.Items

                        Obj = CType(range.Cells(1, cCnt), Excel.Range)
                        If Obj.value.ToString = itm.SubItems(1).Text Then

                            If fEmpty Then
                                fEmpty = False
                            Else
                                sCurrentSQL = sCurrentSQL & ", "
                            End If

                            Obj = CType(range.Cells(rCnt, cCnt), Excel.Range)
                            sCurrentSQL = sCurrentSQL & Format_String(Obj.value.ToString)

                        ElseIf Not fKey AndAlso Obj.value.ToString = XLSSQL_Main.cboKeyXLS.Text Then
                            Obj = CType(range.Cells(rCnt, cCnt), Excel.Range)
                            sKey = Obj.value.ToString
                            sCurrentSQL = sCurrentSQL & Format_String(sKey) & ", "
                            fKey = True
                        End If
                    Next

                Next

                'sCurrentSQL = sCurrentSQL & ") WHERE " & XLSSQL_Main.cboKeySQL.Text & " = " & sKey

                If rCnt = range.Rows.Count Then
                    sSQL = sSQL & sCurrentSQL & ")"
                Else
                    sSQL = sSQL & sCurrentSQL & ")" & vbNewLine
                End If

            Next

            xlWorkBook.Close()
            xlApp.Quit()

            Write_SQL(sSQL)

        Catch ex As Exception
            MessageBox.Show("Could not read " & sFilePath & "." & ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Try
    End Sub

    Private Shared Function get_SQL_Cols() As String
        Dim sSQL As String = ""
        For Each itm As ListViewItem In XLSSQL_Main.lvwFields.Items
            If sSQL.Length = 0 Then
                sSQL = sSQL & itm.SubItems(2).Text
            Else
                sSQL = sSQL & ", " & itm.SubItems(2).Text
            End If
        Next

        Return sSQL

    End Function

    Private Shared Function Format_String(ByVal sString As String) As String
        Return "'" & sString & "'"
    End Function

End Class
